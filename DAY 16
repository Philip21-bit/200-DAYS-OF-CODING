import random
import time

# Generate 1000 simulated sensor data points (values between 1 and 10000)
sensor_data = [random.randint(1, 10000) for _ in range(1000)]
search_target = sensor_data[500]  # Pick a known value for search

# --------- Searching Algorithms ---------

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

# --------- Sorting Algorithms ---------

def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# --------- Benchmarking ---------

def benchmark_sort(sort_func, data):
    start = time.time()
    sorted_data = sort_func(data.copy())
    end = time.time()
    return end - start

def benchmark_search(search_func, data, target):
    start = time.time()
    result = search_func(data, target)
    end = time.time()
    return result, end - start

# --------- Run Benchmarks ---------

# Sorting benchmarks
bubble_time = benchmark_sort(bubble_sort, sensor_data)
insertion_time = benchmark_sort(insertion_sort, sensor_data)
merge_time = benchmark_sort(merge_sort, sensor_data)
quick_time = benchmark_sort(quick_sort, sensor_data)

# Prepare data for binary search
sorted_sensor_data = sorted(sensor_data)

# Searching benchmarks
linear_result, linear_time = benchmark_search(linear_search, sensor_data, search_target)
binary_result, binary_time = benchmark_search(binary_search, sorted_sensor_data, search_target)

# --------- Print Results ---------

print("\n--- Sorting Times (in seconds) ---")
print(f"Bubble Sort:    {bubble_time:.6f}")
print(f"Insertion Sort: {insertion_time:.6f}")
print(f"Merge Sort:     {merge_time:.6f}")
print(f"Quick Sort:     {quick_time:.6f}")

print("\n--- Searching Times (in seconds) ---")
print(f"Linear Search:  {linear_time:.8f} (Found at index {linear_result})")
print(f"Binary Search:  {binary_time:.8f} (Found at index {binary_result})")
