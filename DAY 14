def f(x):
    return x**3 - x - 2

def f_prime(x):
    return 3*x**2 - 1

def bisection_method(a, b, tol=1e-6):
    steps = 0
    if f(a) * f(b) >= 0:
        print("Bisection method fails. f(a) and f(b) must have opposite signs.")
        return None, steps

    while (b - a) / 2.0 > tol:
        steps += 1
        c = (a + b) / 2.0
        if f(c) == 0:
            return c, steps
        elif f(a) * f(c) < 0:
            b = c
        else:
            a = c
    return (a + b) / 2.0, steps

def newton_raphson_method(x0, tol=1e-6, max_iter=100):
    steps = 0
    x = x0
    while steps < max_iter:
        steps += 1
        fx = f(x)
        fpx = f_prime(x)
        if fpx == 0:
            print("Derivative is zero. Newton-Raphson fails.")
            return None, steps
        x_new = x - fx / fpx
        if abs(x_new - x) < tol:
            return x_new, steps
        x = x_new
    print("Newton-Raphson did not converge within the max iterations.")
    return None, steps

# Run comparison
a, b = 1, 2  # Interval for bisection
x0 = 1.5     # Initial guess for Newton-Raphson

root_bisect, steps_bisect = bisection_method(a, b)
root_newton, steps_newton = newton_raphson_method(x0)

print("Bisection Method: Root =", root_bisect, "Steps =", steps_bisect)
print("Newton-Raphson Method: Root =", root_newton, "Steps =", steps_newton)
