#O(1) — Constant Time
def get_first_element(arr):
    return arr[0]  # Always one step, no matter the size

#O(log n) — Logarithmic Time
def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1  # Divides problem in half each time

#O(n) — Linear Time
def find_element(arr, target):
    for item in arr:
        if item == target:
            return True
    return False  # Must scan entire array in worst-case

#O(n log n) — Linearithmic Time
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result += left[i:]
    result += right[j:]
    return result  # Divide and merge: n splits, log n depth

O(n²) — Quadratic Time
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr  # Nested loops over input

#O(nᵏ) — Polynomial Time (Example with k=3)
def cubic_time_example(arr):
    count = 0
    n = len(arr)
    for i in range(n):
        for j in range(n):
            for k in range(n):
                count += 1
    return count  # Three nested loops: O(n^3)


